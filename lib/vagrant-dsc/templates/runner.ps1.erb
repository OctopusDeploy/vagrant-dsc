#
# DSC Runner.
#
# Bootstraps the DSC environment, sets up configuration data
# and runs the DSC Configuration.
#
#

# Set the local PowerShell Module environment path
<% if !options[:module_paths].empty?  %>
$absoluteModulePaths = [string]::Join(";", ("<%= options[:module_paths] %>".Split(";") | ForEach-Object { $_ | Resolve-Path }))

echo "Adding to path: $absoluteModulePaths"
$env:PSModulePath="$absoluteModulePaths;${env:PSModulePath}"
("<%= options[:module_paths] %>".Split(";") | ForEach-Object { gci -Recurse  $_ | ForEach-Object { Unblock-File  $_.FullName} })
<% end %>

<% if !options[:module_install].empty?  %>
Write-Host "Ensure Modules"
Get-PackageProvider -Name NuGet -ListAvailable -ErrorAction SilentlyContinue -ErrorVariable NuGetError | Out-Null
if ($NuGetError) {
    Write-Host "Install Package Provider Nuget"
    Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force | Out-Null
}
if ((Get-PSRepository -Name PSGallery).InstallationPolicy -ne "Trusted") {
    Set-PSRepository -Name PSGallery -InstallationPolicy "Trusted"
}
# Install-Module only installs if the module is not already installed
"<%= options[:module_install] %>".Split(";") | foreach { Install-Module $_ }
<% end %>

$manifestPath = Join-Path "<%= options[:temp_path] %>" "<%= options[:manifests_path] %>"
$script = $(Join-Path $manifestPath "<%= options[:configuration_file] %>" -Resolve -ErrorAction SilentlyContinue)
if ($null -eq $script) {
    $nestedManifestPath = $manifestPath + "/" + (Get-Item $manifestPath).name
    $script = $(Join-Path $nestedManifestPath "<%= options[:configuration_file] %>" -Resolve -ErrorAction SilentlyContinue)
    if ($null -eq $script) {
        Write-Host "Couldn't find file '<%= options[:configuration_file] %>'. Looked in:"
        Write-Host " - $manifestPath"
        Write-Host " - $nestedManifestPath"
        exit 1
    }
}

echo "PSModulePath Configured: ${env:PSModulePath}"
echo ""
echo "Running Configuration file: ${script}"

# Generate the MOF file, only if a MOF path not already provided.
<% if options[:mof_path] == nil %>
Write-Host "Importing manifest '$script'"
. $script

push-location "<%= options[:temp_path] %>"
$StagingPath = $(Join-Path "<%= options[:temp_path] %>" "staging")
<% if options[:configuration_data_file_path] != nil %>
$configDataFilePath = Join-Path "<%= options[:temp_path] %>" <%= options[:configuration_data_file_path] %>
if (-not (Test-Path $configDataFilePath)) {
    $manifestPath = (Join-Path "<%= options[:temp_path] %>" "<%= options[:manifests_path] %>" -Resolve)
    $configDataFilePath = Join-Path "<%= options[:temp_path] %>" ("<%= options[:configuration_data_file_path] %>"" -replace "<%= options[:manifests_path] %>", ("<%= options[:manifests_path] %>" + "/" + (Get-Item $manifestPath).name + "/"))
}
Write-host "Reading config from '$configDataFilePath'"
$Config = $(iex (Get-Content $configDataFilePath | Out-String))

<% end %>
<%=options[:configuration_name]%> -OutputPath $StagingPath <%= options[:parameters] %><% if options[:configuration_data_file_path] != nil %> -ConfigurationData $Config<% end %>
<% else %>
$StagingPath = "<%= options[:mof_path] %>"
<% end %>

# Start a DSC Configuration run
Start-DscConfiguration -Force -Wait -Verbose -Path $StagingPath
if (Test-Path $StagingPath\*.mof) {
    write-host "Cleaning up mof files in $staging"
    del $StagingPath\*.mof
}
pop-location
